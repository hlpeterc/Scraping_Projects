# -*- coding: utf-8 -*-
"""Scraping Project 1: Hangzhou Metro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EcM27UXStmV11RBPmwo6HmdwnacgAPv3

## Scrape a table of Hangzhou Metro Information

### 1. Prepare the soup.
"""

import requests
import pandas as pd
from bs4 import BeautifulSoup

url = 'https://zh.m.wikipedia.org/zh/%E6%9D%AD%E5%B7%9E%E5%9C%B0%E9%93%81'

page = requests.get(url)
page.text

soup = BeautifulSoup(page.text, 'lxml')

"""### 2. Find the table information."""

table = soup.find('table', class_ = 'wikitable')

route = table.find_all('th')
route

"""### 3. Find the column names, and split column `'起点站/终点站'` into two columns."""

column_list = []
for i in route:
  if "号线" not in i.text:
    column2 = i.text.replace('\n', '')
    column_list.append(column2)

column_list[3] = '起点站'
column_list.insert(4, '终点站')

column_list

"""### 4. Find the table information

#### Note that `route` has names of `'th'`, and `info` has names of `'td'`.
"""

route_list = []
for i in route:
  if "号线" in i.text:
    column2 = i.text.replace('\n', '')
    route_list.append(column2)

route_list[3] = '起点站'
route_list.insert(4, '终点站')

"""Find the number of rows by getting the number of routes."""

route_list

len(route_list)

all_the_rows = []
for i in range(2, len(route_list) + 3):

  route = table.find_all('tr')[i].find_all('th')
  info = table.find_all('tr')[i].find_all('td')

  list_of_row = []

  for j in route:
    route_2 = j.text.replace('\n', '')
    list_of_row.append(route_2)

    for k in info:
      info_2 = k.text.replace('\n', '')
      if info_2 == '':
        continue
      list_of_row.append(info_2)

  if list_of_row == []:
    continue
  else:
    all_the_rows.append(list_of_row)

all_the_rows

"""Discard all the `'注'` and `'列'`."""

for i in all_the_rows:
  for j in range(len(i)):
    if '注' in i[j]:
      i[j] = i[j].replace(i[j][-5:], '')

    if '列' in i[j]:
      i[j] = i[j].replace(i[j][-1:], '')

    if i[j] == '-':
      i[j] = '暂未开通'

"""Get a dataframe."""

df = pd.DataFrame(all_the_rows, columns = column_list)
df["车站数目"] = df["车站数目"].astype(int)
df["运营长度（公里）"] = df["运营长度（公里）"].astype(float)
df["配车数量"] = df["配车数量"].astype(int)
df

import seaborn as sns
from sklearn.linear_model import LinearRegression

sns.set(rc={'figure.figsize':(11.7,8.27)})

vis = sns.scatterplot(x = '车站数目', y = '运营长度（公里）', data = df)
vis.set(xlabel='Number of Stations', ylabel='Operating Length (km)')

vis = sns.regplot(x = '车站数目', y = '运营长度（公里）', data = df)
vis.set(xlabel='Number of Stations', ylabel='Operating Length (km)')

model = LinearRegression()
x = df[['车站数目']] 
y = df[['运营长度（公里）']]
model.fit(x, y)
print(model.intercept_, model.coef_, model.score(x, y))

#OLS(y, x)

OLS(df['运营长度（公里）'],df['车站数目']).fit().summary()

vis = sns.regplot(x = '车站数目', y = '配车数量', data = df)
vis.set(xlabel='Number of Stations', ylabel='Number of Cars')

model = LinearRegression()
x = df[['车站数目']] 
y = df[['配车数量']]
model.fit(x, y)
print(model.intercept_, model.coef_, model.score(x, y))

from statsmodels.api import OLS

#OLS(y, x)

OLS(df['配车数量'],df['车站数目']).fit().summary()